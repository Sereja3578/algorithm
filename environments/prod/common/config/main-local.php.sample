<?php
$config = [
    'name' => '${project.name}',
    'components' => [
        'db' => [
            'class' => 'yii\db\Connection',
            'dsn' => 'mysql:host=${db.host};port=${db.port};dbname=${db.database}',
            'username' => '${db.user}',
            'password' => '${db.password}',
            'charset' => 'utf8',
            'enableSchemaCache' => true,
            'on afterOpen' => function (yii\base\Event $event) {
                /* @var $db yii\db\Connection */
                $db = $event->sender;
                $db->createCommand('SET time_zone = :timeZone;', ['timeZone' => date('P')])->execute();
            }
        ],
        'mailer' => [
            'class' => 'yii\swiftmailer\Mailer',
            'viewPath' => '@common/mail',
            'useFileTransport' => '${mailer.useFileTransport}',
        ],
        'redis' => [
            'class' => 'dcb9\redis\Connection',
            'hostname' => '${redis.host}',
            'port' => intval('${redis.port}'),
            'password' => '${redis.password}' ?: null,
            'database' => intval('${redis.db}')
        ],
        'pureRedis' => function () {
            $redis = new \Redis;
            if (!$redis->connect('${redis.host}', '${redis.port}')) {
                throw new \RedisException('Can not connect.');
            }
            $password = '${redis.password}';
            if ($password && !$redis->auth($password)) {
                throw new \RedisException('Can not authenticate.');
            }
            if (!$redis->select(intval('${redis.db}'))) {
                throw new \RedisException('Can not select database.');
            }
            return $redis;
        },
        'pureRedisQuotes' => function () {
            $redis = new \Redis;
            if (!$redis->connect('${pureRedisQuotes.host}', '${pureRedisQuotes.port}')) {
                throw new \RedisException('Can not connect.');
            }
            $password = '${pureRedisQuotes.password}';
            if ($password && !$redis->auth($password)) {
                throw new \RedisException('Can not authenticate.');
            }
            if (!$redis->select(intval('${pureRedisQuotes.database}'))) {
                throw new \RedisException('Can not select database.');
            }
            return $redis;
        },
        'amqp' => [
            'class' => '${amqp.class}',
            'host' => '${amqp.host}',
            'port' => intval('${amqp.port}'),
            'vhost' => '${amqp.vhost}',
            'login' => '${amqp.login}',
            'password' => '${amqp.password}',
            //'delayQueueUsage' => true
        ]
    ],
];

return $config;
